from flask import Flask

# import json
# import logging


import telebot
from telebot import types

import our_telebot
from our_telebot import GameBotHandler as OTB
import players
from players import Protagonist
import db.database
from db.database import DB
import world_map_class as wmc
import characters as npc
import quests as qw
import time


game_rules = '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: \n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π:\n–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ –ø–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º –º–µ—Å—Ç–∞–º –ê—Ä–∫–∞–Ω–∏–∏, –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–π—Ç–µ —Ç–∞–π–Ω—ã –≤—ã—Å–æ–∫–∏—Ö –≤–µ—Ç—Ä–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –¥—Ä–µ–≤–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –æ–ø–∞—Å–Ω—ã—Ö –æ–±–ª–∞–∫–æ–≤—ã—Ö –ª–µ—Å–æ–≤. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: –û–±—â–∞–π—Ç–µ—Å—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é, –∑–∞–¥–∞–Ω–∏—è –∏ —Å–µ–∫—Ä–µ—Ç—ã. –í—ã–±–∏—Ä–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ö–æ–¥ —Å–æ–±—ã—Ç–∏–π.\n–ë–æ–∏ —Å –≤—Ä–∞–≥–∞–º–∏:\n–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å –≤–æ–∑–¥—É—à–Ω—ã–º–∏ —Ç–≤–∞—Ä—è–º–∏ –∏ –æ–±–ª–∞—á–Ω—ã–º–∏ –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –±–æ—è—Ö. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—ç—Ä–æ–∞–ª—å—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∑–µ–ª—å—è –¥–ª—è –ø–æ–±–µ–¥—ã.\n–ö–≤–µ—Å—Ç—ã –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:\n–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö, —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å—é–∂–µ—Ç –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –ê—Ä–∫–∞–Ω–∏–∏.\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º:\n–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è, —É–ª—É—á—à–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏, —Å–æ–±–∏—Ä–∞–π—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º.\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã:\n–ü–æ–±–µ–¥–∏—Ç–µ –≤—Ä–∞–≥–æ–≤, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–≤–µ—Å—Ç—ã –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –º–∏—Ä –ê—Ä–∫–∞–Ω–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.'

token = ''
bot = telebot.TeleBot(token, threaded=False)

db = DB()
db.create_tables()
gamers_set = set()

#*************************************************************************************
#*************************************************************************************
#*************************************************************************************
#*************************************************************************************

# import telebot
# from telebot import types
# from flask import Flask, request

# token = '6769840382:AAFAdvy-2e2VozIQGTIMYYluRaPPR9Ea6rA'
# secret = 'dfugvy78v7v8tw7v7cde9'
# url = 'https://cursebow.pythonanywhere.com/' + secret

# bot = telebot.TeleBot(token, threaded=False)
# bot.remove_webhook()
# bot.set_webhook(url=url)

# menus_list = { "Init": ["World", "Stats"],
#                 "World": ["Move", "Characters"],
#                 }


# app = Flask(__name__)
# @app.route('/'+secret, methods=['POST'])
# def webhook():
#     update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
#     bot.process_new_updates([update])
#     return 'ok', 200
#******************************************************************************************
#******************************************************************************************

def go_to_empty_bot(message, msg):
    """
    Sends a message to the specified chat ID using the `bot` object.

    Parameters:
        - message: The message object containing the chat ID.
        - msg: The message to send.

    Returns:
        None
    """
    bot.send_message(message.chat.id, msg, reply_markup = types.ReplyKeyboardRemove())

def go_to_authorizing_buttons(message):
    """
    Go to the authorizing buttons.

    Parameters:
        message (object): The message object.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_in_up_buttons()
    sender = bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø—É—Ç–Ω–∏–∫", reply_markup=markup)
    bot.register_next_step_handler(sender, register_open)


@bot.message_handler(commands=['start'])
def handle_init(message):
    """
    Handles the 'start' command from the user and calls the 'go_to_authorizing_buttons'
    function with the provided message.

    Args:
        message (object): The message object containing information about the user's
            command.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    go_to_authorizing_buttons(message)


def register_open(message):
    """
    Registers the user in the system based on the message received.

    Parameters:
        message (obj): The message object received from the user.

    Returns:
        None
    """
    if message.text == 'üõÉ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        go_to_register(message)
    elif message.text == '‚úÖ –í–æ–∏ÃÜ—Ç–∏':
        go_to_sign_in(message)
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_empty_bot(message, '–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫')
    else:
        go_to_authorizing_buttons(message)



def go_to_register(message):
    """
    Send a message to the user with a cancel button and prompt them to enter their name.

    Parameters:
        message (obj): The message object received from the user.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_cancel_button()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)", reply_markup = markup)
    bot.register_next_step_handler(message, register)


def go_to_sign_in(message):
    """
    Sends a message to the user asking for their name and provides a cancel button.

    Parameters:
        message (object): The message object received from the user.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_cancel_button()
    bot.send_message(message.chat.id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup = markup)
    bot.register_next_step_handler(message, login)


def go_to_register_continue(message, nickname):
    """
    Send a message to the user and register the next step handler.

    Args:
        message (Message): The message object containing information about the user's input.
        nickname (str): The nickname of the user.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    sender = bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(sender, lambda m: register_continue(m, nickname))


def go_to_user_exists(message):
    """
    Sends a message to the user indicating that the given username
    is already taken and prompts them to choose another username.

    Parameters:
        message (unknown type): The message object containing information about the user and the chat.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.send_message(message.chat.id, "–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ –∏–º—è")
    bot.register_next_step_handler(message, register)


def register(message):
    """
    Register a user based on the provided message.

    Args:
        message (object): The message object containing the user input.

    Returns:
        None

    """
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_authorizing_buttons(message)
        return
    if db.check_nickname_existence(message.text):
        go_to_register_continue(message, message.text)
    else:
        go_to_user_exists(message)


def register_continue(message, nickname):
    """
    Registers the continuation of the registration process.

    :param message: The message object containing information about the user's input.
    :type message: Message
    :param nickname: The nickname of the user.
    :type nickname: str
    """
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_empty_bot(message, "–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫")
        return
    go_to_register_confirm(message, nickname, message.text, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–∞—Ä–æ–ª—å")


def go_to_register_confirm(message, nickname, password, msg):
    """
    Sends a message to the user and registers the next step handler.

    Args:
        message (unknown type): The message object containing information about the user and the chat.
        nickname (str): The nickname of the user.
        password (str): The password provided by the user.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    sender = bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(sender, lambda m: register_confirm(m, nickname, password))


def go_to_npcs_menu(message, gamer):
    """
    Generates a menu for the non-playable characters (NPCs) in the game.

    Parameters:
        message (Message): The message object representing the user's input.
        gamer (Gamer): The gamer object representing the player.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    npcs = gamer.get_current_location().get_npcs()
    markup = OTB.create_dict_buttons(npcs)
    sender = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m: handle_npcs(m, gamer))


def go_to_certain_npc_menu(message, gamer, npc_data):
    """
    Go to a certain NPC menu.

    Args:
        message (TelegramMessage): The message object.
        gamer (Player): The player object.
        npc (NPC): The NPC object.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_npcs_buttons()
    sender = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m: handle_npcs_action(m, gamer, npc_data))


def go_to_loactions_menu(message, gamer):
    """
    Generates a menu with the linked locations for the current gamer's location
    and sends it as a message to the specified chat. The function registers a
    callback to handle the user's choice of location.

    :param message: The message object that triggered this function
    :type message: Message
    :param gamer: The gamer object
    :type gamer: Gamer
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_location_buttons(gamer.get_current_location().get_linked_locations())
    sender = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é", reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m: show_locations(m, gamer))


def go_to_enemies_menu(message, gamer):
    """
    Sends a message to the user to navigate to the enemies menu.

    :param message: The message object received from the user.
    :type message: any
    :param gamer: The gamer object representing the current user.
    :type gamer: Gamer
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_enemy_list_buttons(gamer.get_current_location().get_enemies())
    sender = bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –≤—Ä–∞–≥–æ–≤", reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m : handle_enemies(m, gamer))


def go_to_top_game_menu(message, gamer, msg):
    """
    Generates a game menu and sends it to the specified chat ID.

    Parameters:
        message (telegram.Message): The message object that triggered the function.
        gamer (str): The username of the gamer.
        msg (str): The message to be displayed in the game menu.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = markup = OTB.create_game_buttons()
    sender = bot.send_message(message.chat.id, msg, reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m : handle_game_top(m, gamer))


def register_confirm(message, nickname, password):
    """
    Registers confirmation for a user with a given message, nickname, and password.

    Parameters:
    - message (obj): The message object that triggered the registration confirmation.
    - nickname (str): The nickname of the user.
    - password (str): The password provided by the user.

    Returns:
    - None
    """
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_empty_bot(message, "–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫")
        return
    if message.text == password:
        create_and_initiate(message, nickname, password)
    else:
        go_to_register_confirm(message, nickname, password, "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


def create_and_initiate(message, nickname, password):
    """
    Creates a new user with the given nickname and password, and initiates a game for the user.

    Parameters:
        message (str): The message to be displayed during game initiation.
        nickname (str): The nickname of the user.
        password (str): The password of the user.

    Returns:
        None
    """
    db.create_user(nickname, password)
    gamer = Protagonist(nickname, wmc.Location('location_1'))
    gamers_set.add(gamer)
    initiate_game(message, gamer)


def login(message):
    """
    Log in the user based on the provided message.

    Parameters:
    - message (object): The message object containing the user input.

    Returns:
    - None

    Description:
    This function takes in a message object and extracts the user's nickname from it.
    If the nickname is '–û—Ç–º–µ–Ω–∞', it calls the 'go_to_empty_bot' function and returns.
    If the nickname does not exist, it sends a message to the user saying that the user
    does not exist and registers the 'login' function as the next step handler.
    If the nickname exists, it sends a message to the user saying "Enter your password"
    and registers the 'login_load' function as the next step handler, passing the message
    and the nickname as parameters.
    """
    nickname = message.text
    if nickname == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_empty_bot(message, "–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫")
        return
    if  db.check_nickname_existence(nickname):
        bot.send_message(message.chat.id,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        go_to_sign_in(message)
    else:
        go_to_login_load(message, nickname, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å")


# **************************************************************GAME PROCESS LAUNCING
def login_load(message, nickname):
    """
    Login and load the user's data.

    Parameters:
        message (object): The message object containing the user's input.
        nickname (str): The nickname of the user.

    Returns:
        None
    """
    password = message.text
    if password == '‚ùå –û—Ç–º–µ–Ω–∞':
        go_to_empty_bot(message, "–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –ø—É—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω–∏–∫")
        return
    if not db.check_login_and_password(nickname, password):
        go_to_login_load(message, nickname, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
    else:
        gamer = Protagonist(nickname, wmc.Location('location_1'))
        gamers_set.add(gamer)
        db.load_all_user_data(gamer)
        initiate_game(message, gamer)


def go_to_login_load(message, nickname, msg):
    """
    A function to go to the login load.

    Parameters:
    - message: The message object.
    - nickname: The nickname.
    - msg: The message.

    Returns:
    None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    sender = bot.send_message(message.chat.id, msg)
    bot.register_next_step_handler(sender, lambda m: login_load(m, nickname))


# **************************************************************GAME PROCESS LAUNCING
def initiate_game(message, gamer):
    """
    Initializes a new game with the given message and nickname.

    Args:
        message (str): The message object that triggered the game initiation.
        nickname (str): The nickname of the player initiating the game.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_game_buttons()
    sender = bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –º–∞–≥–∏–∏", reply_markup=markup)
    bot.register_next_step_handler(sender, lambda m : handle_game_top(m, gamer))


def handle_game_top(message, gamer):
    """
    Handle the top-level game menu based on the user's message.

    Args:
        message (obj): The message object containing the user's input.
        gamer (obj): The gamer object representing the current player.

    Returns:
        None.
    """
    if message.text == 'üë©‚Äçüé® –ü–µ—Ä—Å–æ–Ω–∞–∂–∏':
        go_to_npcs_menu(message, gamer)
    elif message.text == 'üßõ‚Äç‚ôÇÔ∏è –í—Ä–∞–≥–∏':
        go_to_enemies_menu(message, gamer)
    elif message.text == 'üåç –ö–∞—Ä—Ç–∞':
        go_to_loactions_menu(message, gamer)
    elif message.text == 'üé≤ –ü—Ä–∞–≤–∏–ª–∞':
        show_rules(message, gamer)
    elif message.text == 'ü•∑ –ì–µ—Ä–æ–π':
        go_to_hero(message, gamer, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ')
    elif message.text == '‚ùå –í—ã—Ö–æ–¥':
        go_back_to_login(message, gamer)
    else:
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, lambda m: handle_game_top(m, gamer))


def show_rules(message, gamer):
    """
    Show the rules for the game.

    Args:
        message (obj): The message object containing the user's input.
        gamer (obj): The gamer object representing the current player.

    Returns:
        None.
    """
    bot.send_message(message.chat.id, game_rules)
    bot.register_next_step_handler(message, lambda m: handle_game_top(m, gamer))


def go_to_hero(message, gamer, msg):
    """
    Clears the step handler for the given chat ID. Creates a markup with hero buttons. Sends a message with the given text and the markup as a reply to the chat ID. Registers the next step handler with a lambda function that calls choose_hero_action with the next message and the gamer as parameters.

    Parameters:
        - message (obj): The message object.
        - gamer (obj): The gamer object.
        - msg (str): The text of the message to be sent.

    Returns:
        This function does not return anything.
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_hero_buttons()
    sender = bot.send_message(message.chat.id, msg, reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m : choose_hero_action(m, gamer))


def choose_hero_action(message, gamer):
    """
    Choose the action for the hero based on the given message and gamer.

    Parameters:
        message (object): The message object containing the user input.
        gamer (object): The gamer object representing the player.

    Returns:
        None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_top_game_menu(message, gamer, '–ú–∏—Ä')
        return
    elif message.text == 'üß© –ö–≤–µ—Å—Ç—ã':
        get_quests(message, gamer)
    elif message.text == '‚ùì –ò–Ω—Ñ–æ':
        get_info(message, gamer)
    elif message.text == '‚ûï –õ–µ—á–µ–Ω–∏–µ':
        if gamer.heal():
            go_to_hero(message, gamer, '–õ–µ—á–µ–Ω–∏–µ')
        else:
            go_to_hero(message, gamer, '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–µ–ª—å—è')
    elif message.text == 'üß≥ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å':
        get_inventory(message, gamer)
    else:
        sender = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç")
        bot.register_next_step_handler(sender, lambda m: choose_hero_action(m, gamer))

def get_info(message, gamer):
    """
    Retrieves the information about the hero and sends it as a message to the specified chat.

    Parameters:
        message (telegram.Message): The message object that triggered the function.
        gamer (Gamer): The gamer object representing the player.

    Returns:
        None
    """
    hp, lvl = gamer.get_current_stats()
    sender = bot.send_message(message.chat.id, f"—Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {hp}")
    sender = bot.send_message(message.chat.id, f"—Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {lvl}")
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(sender, lambda m: choose_hero_action(m, gamer))



def get_inventory(message, gamer):
    """
    Retrieves the inventory of a gamer and sends each item as a message to the specified chat.

    Parameters:
        message (telegram.Message): The message object that triggered the function.
        gamer (Gamer): The gamer object representing the player.

    Returns:
        None
    """
    inventory = gamer.get_inventory()
    for key, value in inventory.items():
        item_str = f"{key}: {value}"
        sender = bot.send_message(message.chat.id, item_str)
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(sender, lambda m: choose_hero_action(m, gamer))


def get_quests(message, gamer):
    """
    Generates a list of quests for a given gamer and sends it as a message to the chat.

    Parameters:
        - message (obj): The message object representing the user's input.
        - gamer (obj): The gamer object representing the user playing the game.

    Returns:
        None
    """
    markup = OTB.create_quests_list_buttons(gamer.get_current_quests())
    sender = bot.send_message(message.chat.id, "–ö–≤–µ—Å—Ç—ã", reply_markup = markup)
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(sender, lambda m : choose_quest(m, gamer))


def choose_quest(message, gamer):
    """
    This function is responsible for handling the user's choice of quest from a given message and gamer.

    Parameters:
        - message: The message object containing the user's input.
        - gamer: The gamer object representing the user.

    Returns:
        - None

    Description:
        - If the user's input is '–ù–∞–∑–∞–¥', the function calls the 'go_to_hero' function and returns.
        - Otherwise, it iterates through the gamer's current quests and checks if the user's input matches the name of any quest.
        - If there is a match, the function sends the quest's task and starts the quest.
        - If the quest is an instance of 'SecretPotionQuest', the function waits for 1 second and then performs the quest.
        - After performing the quest, it sends a result message based on the outcome.
        - If the quest is not 'SecretPotionQuest', it prompts the user to write an answer and registers a next step handler to perform the question quest.
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_hero(message, gamer, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–µ—Ä–æ—é')
        return

    for quest in gamer.get_current_quests():
        if message.text == quest.get_name():
            bot.send_message(message.chat.id, quest.get_task())
            if isinstance(quest, qw.SecretPotionQuest):
                bot.send_message(message.chat.id, quest.start_quest())
                bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è–µ–º –∫–≤–µ—Å—Ç...")
                time.sleep(1)
                res = quest.perform()

                if res:
                    result = f"–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ {quest.artifact_name}!"
                else:
                    result = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {quest.artifact_name} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫–∏!"

                sender = bot.send_message(message.chat.id, result)
                gamer.remove_completed_quests()
                get_quests(sender, gamer)
            else:
                go_to_question_quest(message, gamer, quest)
            return

    bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –Ω–µ—Ç.")
    bot.register_next_step_handler(message, lambda m: choose_quest(m, gamer))


def go_to_question_quest(message, gamer, quest):
    """
    Registers a user's response to a question quest.

    Parameters:
        message (object): The message object containing the user's response.
        gamer (object): The gamer object representing the user.
        quest (object): The quest object representing the current quest.

    Returns:
        None
    """
    markup = OTB.create_cancel_button()
    sender = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup = markup)
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(sender, lambda m: handle_question_quest(m, gamer, quest))


def handle_question_quest(message, gamer, quest):
    """
    Handles the user's response to a question quest.

    Args:
        message (telegram.Message): The message object representing the user's response.
        gamer (Gamer): The gamer object associated with the user.
        quest (Quest): The quest object being handled.

    Returns:
        None
    """
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        get_quests(message, gamer)
        return
    if quest.perform(message.text):
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞.")
        gamer.remove_completed_quests()
        get_quests(message, gamer)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫—É.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, lambda m: handle_question_quest(m, gamer, quest))


def perfom_question_quest(message, gamer, quest):
    """
    Perform a question quest.

    Args:
        message (Type): The message object containing the text of the message.
        gamer (Type): The gamer object.
        quest (Type): The quest object.

    Returns:
        None
    """
    result = quest.perform(message.text)
    if result:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞.")
        gamer.remove_completed_quests()
        get_quests(message, gamer)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫—É.")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, lambda m: perfom_question_quest(m, gamer, quest))


def go_back_to_login(message, gamer):
    """
    Sends a "Bye" message to the user and removes the reply keyboard. Writes all user data to the database and registers the "register_open" function as the next step handler.

    Parameters:
        message (obj): The message object containing information about the user and the chat.
        gamer (str): The name of the gamer.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    sender = bot.send_message(message.chat.id, "Bye", reply_markup = types.ReplyKeyboardRemove())
    db.write_all_user_data(gamer)
    bot.register_next_step_handler(sender, register_open)


def show_locations(message, gamer):
    """
    Show available locations based on user input.

    Args:
        message (obj): The message object containing the user input.
        gamer (obj): The gamer object representing the user.

    Returns:
        None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_top_game_menu(message, gamer, '–ú–∏—Ä')
        return
    else:
        locations_list = gamer.get_current_location().get_linked_locations()
        location = next((location for location in locations_list
                        if 'üåè ' + location['name'] == message.text), None)
        if location is None:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ—Ç.")
            bot.register_next_step_handler(message, lambda m: show_locations(m, gamer))
            return
        else:
            go_to_location_action(message, gamer, location)


def go_to_location_action(message, gamer, location):
    """
    Clears the step handler for the chat ID of the given message.
    Creates a location action buttons markup. Sends a message with the text "Ok"
    and the created markup to the chat ID of the given message.
    Registers the next step handler with the sender message to call the choose_action_of_location_menu function
    with the given message, gamer, and location as arguments.

    Args:
        message (Any): The message object.
        gamer (Any): The gamer object.
        location (Any): The location object.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_location_act_buttons()
    sender = bot.send_message(message.chat.id, "Ok", reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m : choose_action_of_location_menu(m, gamer, location))


def choose_action_of_location_menu(message, gamer, choosen):
    """
    Generates the action to be taken based on the user's input in the location menu.

    Args:
        message (str): The user's input message.
        gamer (str): The gamer's information.
        choosen (str): The selected option from the menu.

    Returns:
        None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_loactions_menu(message, gamer)
    else:
        if message.text == '‚ùì –ò–Ω—Ñ–æ':
            show_location_info(message, gamer, choosen)
        elif message.text == '‚è© –ü–µ—Ä–µ–π—Ç–∏':
            go_to_location(message, gamer, choosen)
        else:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç.")
            bot.register_next_step_handler(message, lambda m: choose_action_of_location_menu(m, gamer, choosen))


def show_location_info(message, gamer, choosen):
    """
    Generates a comment for the given function body in a markdown code block with the correct language syntax.

    Parameters:
        message (str): The message to be displayed.
        gamer (str): The gamer's name.
        choosen (str): The chosen description.

    Returns:
        None
    """
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = OTB.create_location_act_buttons()
    sender = bot.send_message(message.chat.id, choosen['description'], reply_markup = markup)
    bot.register_next_step_handler(sender, lambda m : choose_action_of_location_menu(m, gamer, choosen))


def go_to_location(message, gamer, choosen):
    """
    Go to a specific location in the game.

    Parameters:
    - message: The message object that triggered the function.
    - gamer: The gamer object representing the player.
    - chosen: A dictionary containing the chosen location.

    Returns:
    None
    """
    name = gamer.get_current_location().get_linked_location_id_by_name(choosen['name'])
    gamer.go(wmc.Location(name))
    go_to_top_game_menu(message, gamer, '–ú–∏—Ä')


def handle_enemies(message, gamer):
    """
    Handles the selection of enemies in the game.

    Parameters:
    - message: The message object that triggered the function.
    - gamer: The gamer object representing the player.

    Returns:
    None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_top_game_menu(message, gamer, '–ú–∏—Ä')
    else:
        enemies_data = gamer.get_current_location().get_full_enemies_data()
        enemy_name = message.text
        for enemy in enemies_data:
            a = f"üßõ‚Äç‚ôÇÔ∏è {enemy['name']}"
            if  a == enemy_name:
                markup = OTB.create_enemy_buttons()
                bot.clear_step_handler_by_chat_id(message.chat.id)
                sender = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
                                            reply_markup = markup)
                bot.register_next_step_handler(sender,
                                               lambda m: handle_enemies_action(m, gamer, enemy))
                return
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –≤—Ä–∞–≥–∞ –Ω–µ—Ç')
        bot.register_next_step_handler(message, lambda m: handle_enemies(m, gamer))


def handle_enemies_action(message, gamer, enemy):
    """
    Handle the action performed by the enemies.

    Args:
        message (str): The message received.
        gamer (str): The gamer performing the action.
        enemy (str): The enemy being targeted.

    Returns:
        None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_enemies_menu(message, gamer)
    elif message.text == '‚ùì –ò–Ω—Ñ–æ':
        handle_enemy_info_showing(message, gamer, enemy)
    elif message.text == '‚öîÔ∏è –ë–æ–π':
        handle_enemy_fighting(message, gamer, enemy)
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç')
        bot.register_next_step_handler(message, lambda m: handle_enemies_action(m, gamer, enemy))


def get_description(message, desc_dict):
    """
    Generate a function comment for the given function body.

    Args:
        message (str): The message to process.
        desc_dict (dict): A dictionary containing descriptions.

    Returns:
        sender (str): The sender of the message.
    """
    for key in desc_dict.keys():
        if key != 'id' and key != 'dialog':
            sender = bot.send_message(message.chat.id, f"{key}: {desc_dict[key]}")
    return sender


def handle_enemy_info_showing(message, gamer, enemy):
    """
    Clears the step handler for the current chat ID and registers a new step handler for the given enemy.

    Parameters:
    - message: The message object representing the user's message.
    - gamer: The gamer object associated with the user.
    - enemy: The enemy object representing the enemy.

    Returns:
    None
    """
    sender = get_description(message, enemy)
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(sender,
                                   lambda m: handle_enemies_action(m, gamer, enemy))


def handle_enemy_fighting(message, gamer, enemy):
    """
    Handles enemy fighting.

    Args:
        message (object): The message object.
        gamer (object): The gamer object.
        enemy (object): The enemy object.

    Returns:
        None
    """
    art_count = gamer.check_current_arts_count()
    if gamer.attack(npc.Enemy(enemy)):
        bot.send_message(message.chat.id, '–ü–æ–±–µ–¥–∞')
        if gamer.check_win_condition():
            if art_count != gamer.check_current_arts_count():
                bot.send_message(message.chat.id, '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞—Ä—Ç')
            go_to_top_game_menu(message, gamer, '–í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É')
        else:
            go_to_enemies_menu(message, gamer)
    else:
        go_to_top_game_menu(message, gamer, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')


def handle_npcs(message, gamer):
    """
    Handles the interaction with non-player characters (NPCs) based on the user's message and the current state of the game.

    Parameters:
    - message (object): The message object containing the user's input.
    - gamer (object): The gamer object representing the current game state.

    Returns:
    None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_top_game_menu(message, gamer, '–ú–∏—Ä')
    else:
        npcs_data = gamer.get_current_location().get_full_npcs_data()
        for npc_data in npcs_data:
            npc_name = npc_data['name']
            if f'üë≥ {npc_name}' == message.text:
                go_to_certain_npc_menu(message, gamer, npc_data)
                return

        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç')
        bot.register_next_step_handler(message, lambda m: handle_npcs(m, gamer))



def handle_npcs_action(message, gamer, npc_data):
    """
    Handles the action of NPCs based on the message received.

    Parameters:
    - message (str): The message received from the user.
    - gamer (str): The gamer object representing the user.
    - npc_data (str): The data of the NPC.

    Returns:
    - None
    """
    if message.text == '‚ùå –ù–∞–∑–∞–¥':
        go_to_npcs_menu(message, gamer)
    elif message.text == '‚ùì –ò–Ω—Ñ–æ':
        sender = get_description(message, npc_data)
        bot.register_next_step_handler(sender, lambda m: handle_npcs_action(m, gamer, npc_data))
    elif message.text == 'üß© –í–∑—è—Ç—å –∫–≤–µ—Å—Ç':
        assign_quest_to_hero(message, gamer, npc_data)
    elif message.text == 'üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å':
        talk_to_npc(message, gamer, npc_data)
    else:
        sender = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç")
        bot.register_next_step_handler(sender, lambda m: handle_npcs_action(m, gamer, npc_data))


def assign_quest_to_hero(message, gamer, npc_data):
    """
    Assigns a quest to a hero.

    Parameters:
    - message: The message object containing information about the chat.
    - gamer: The gamer object representing the hero.
    - npc_data: The data of the NPC offering the quest.

    Returns:
    None
    """
    npc_instance = npc.NPC(npc_data)
    quest_type, quest_id = npc_instance.offer_quest()
    quest = gamer.add_new_quest(quest_type, quest_id)
    bot.send_message(message.chat.id, f'–ü–æ–ª—É—á–µ–Ω –∫–≤–µ—Å—Ç "{quest.get_name()}"')
    go_to_npcs_menu(message, gamer)




def talk_to_npc(message, gamer, npc_data):
    """
    Generates a comment for the given function body in a markdown code block with the correct language syntax.

    Args:
        message (str): The message to be processed.
        gamer (str): The gamer to interact with.
        npc_data (dict): The data of the NPC.

    Returns:
        None
    """
    npc_instance = npc.NPC(npc_data)
    msg = npc_instance.get_start_messages()
    ind_message = msg.ident

    next_msg_list = npc_instance.get_next_messages(ind_message)
    markup = OTB.create_answer_buttons(len(next_msg_list))
    bot.send_message(message.chat.id,
                              f"{npc_instance.name}: {msg.npc}", reply_markup=markup)
    for idx, msg in enumerate(next_msg_list, start=1):
        bot.send_message(message.chat.id, f"{idx}. {msg.user}")
    continue_conversation(message, gamer, npc_instance, ind_message)


def continue_conversation(message, gamer, npc_instance, ind_message):
    """
    Continue the conversation between the player and the non-player character (NPC).

    Args:
        message (TelegramMessage): The message object containing the user input.
        gamer (Gamer): The gamer object representing the player.
        npc_instance (NPC): The instance of the non-player character.
        ind_message (int): The index of the current message in the conversation.

    Returns:
        None

    Raises:
        None
    """
    if message.text == '‚ùå –û–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É':
        go_to_npcs_menu(message, gamer)
        return
    next_msg_list = npc_instance.get_next_messages(ind_message)
    if not next_msg_list or len(next_msg_list) == 0:
        bot.register_next_step_handler(message,
                               lambda m: continue_conversation(m, gamer, npc_instance, ind_message))

    if message.text != 'üó£ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å':
        ind_message = next_msg_list[int(message.text) - 1].ident
        answer = npc_instance.get_messages(ind_message)
        if not answer:
            return
        bot.send_message(message.chat.id, f"{npc_instance.name}: {answer.npc}")
        next_msg_list = npc_instance.get_next_messages(ind_message)
        for idx, msg in enumerate(next_msg_list, start=1):
            bot.send_message(message.chat.id, f"{idx}. {msg.user}")
        markup = OTB.create_answer_buttons(len(next_msg_list))
        message = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç', reply_markup=markup)
    bot.register_next_step_handler(message,
                                   lambda m: continue_conversation(m, gamer, npc_instance, ind_message))




bot.infinity_polling()

